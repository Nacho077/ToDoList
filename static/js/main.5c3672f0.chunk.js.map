{"version":3,"sources":["features/actions/index.js","features/modules/input/input.js","features/modules/ToDos/todos.js","features/modules/contenedor/contenedor.js","features/modules/header/header.jsx","App.js","features/reducer/index.js","features/store/index.js","serviceWorker.js","index.js"],"names":["addToDo","payload","type","Input","props","HandleChange","event","setState","value","target","handleSubmit","preventDefault","state","className","this","placeholder","onChange","onClick","Component","Form","connect","todo","ToDo","dispatch","Todos","complete","e","completeToDo","trash","removeToDo","map","el","key","todoComplete","ToDoComplete","Contenedor","Header","App","initialState","rootReducer","action","filter","concat","store","createStore","Reducer","window","__REDUX_DEVTOOLS_EXTENSION__","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c3672f0.chunk.js","sourcesContent":["export function addToDo(payload){\n    return{\n        type: \"ADD_TODO\",\n        payload\n    }\n}\n\nexport function completeToDo(payload){\n    return{\n        type: \"COMPLETE_TODO\",\n        payload\n    }\n}\n\nexport function removeToDo(payload){\n    return{\n        type: \"REMOVE_TODO\",\n        payload\n    }\n}","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { addToDo } from \"../../actions\"\r\n\r\n\r\n\r\nclass Input extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      value: \"\"\r\n    };\r\n  }\r\n\r\n  HandleChange = event => {\r\n    this.setState({value: event.target.value})\r\n  }\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const { value } = this.state;\r\n    this.props.addToDo(value);\r\n    this.setState({value: \"\"});\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <form>\r\n        <input className=\"input\" value={this.state.value} type=\"text\" placeholder=\"To Do\" onChange={this.HandleChange}>\r\n          {this.value}\r\n        </input>\r\n        <button className=\"buton btn btn-primary\" type=\"submit\" onClick={this.handleSubmit}>Agregar</button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch){\r\n  return{\r\n    addToDo: value => dispatch(addToDo(value))\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n  return{\r\n      todo: state.ToDo\r\n  }\r\n}\r\n\r\nconst Form = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Input);\r\n\r\nexport default Form;","import React, {Component} from 'react';\nimport { connect } from \"react-redux\";\nimport { addToDo, completeToDo, removeToDo } from \"../../actions\"\n\nclass Todos extends Component{\n\n    complete = e =>{\n        e.preventDefault();\n        var value = e.target.value\n        this.props.completeToDo(value);\n    }\n\n    trash = e =>{\n        e.preventDefault();\n        var value = e.target.value\n        this.props.removeToDo(value)\n    }\n    \n    render(){\n        return(\n            <ul className=\"list-group\">\n                {this.props.todo.map(el => <li key={el} className=\"incomplete list-group-item\">\n                    {el}\n                    <button  value={el} onClick={this.complete}  className=\"incomplete btn btn-outline-success fas fa-check-square\">\n                    </button>\n                </li>)}\n                {this.props.todoComplete.map(el => <li key={el} className=\"complete list-group-item\">\n                    {el}\n                    <button value={el} onClick={this.trash} className=\"incomplete btn btn-outline-secondary fas fa-trash-alt\">\n                    </button>\n                </li>)}\n\n            </ul>\n        )\n    }\n}\n\nfunction mapDispatchToProps(dispatch){\n    return {\n        completeToDo: value => dispatch(completeToDo(value)),\n        addToDo: value => dispatch(addToDo(value)),\n        removeToDo: value => dispatch(removeToDo(value))\n    }\n}\n\nfunction mapStateToProps(state){\n    return{\n        todo: state.ToDo,\n        todoComplete: state.ToDoComplete\n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Todos);","import React from 'react';\nimport Input from \"../input/input\";\nimport Todos from \"../ToDos/todos\"\n\nexport default function Contenedor(){\n    return(\n        <div className=\"contenedor\">\n            <Input />\n            <Todos />\n        </div>\n    )\n}","import React from 'react';\n\n\nexport default function Header(){\n    return(\n        <div className=\"header\">\n            <h1>Hello World!</h1>\n            <h3>App created by: Ignacio Gimenez</h3>\n        </div>\n    )\n}","import React from 'react';\r\nimport Contenedor from './features/modules/contenedor/contenedor';\r\nimport Header from './features/modules/header/header'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Contenedor />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const initialState = {\r\n  ToDo: [],\r\n  ToDoComplete: []\r\n}\r\n\r\nfunction rootReducer(state = initialState, action){\r\n  if(action.type === \"ADD_TODO\"){\r\n    return {\r\n      ToDoComplete: state.ToDoComplete.filter(todo => todo!== action.payload),\r\n      ToDo: state.ToDo.concat(action.payload)\r\n    }\r\n  }\r\n  if(action.type === \"COMPLETE_TODO\"){\r\n    return{\r\n      ToDo: state.ToDo.filter(todo => todo !== action.payload),\r\n      ToDoComplete: state.ToDoComplete.concat(action.payload)\r\n    }\r\n  }\r\n  if(action.type === \"REMOVE_TODO\"){\r\n    return{\r\n      ...state,\r\n      ToDoComplete: state.ToDoComplete.filter(todo => todo !== action.payload)\r\n    }\r\n  }\r\n  return state;\r\n}\r\n\r\nexport default rootReducer;","import { createStore } from 'redux';\r\nimport Reducer from '../reducer';\r\n\r\nconst store = createStore(\r\n  Reducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './features/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}